{
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/TCDigitalFlyer\/documentation\/TCDigitalFlyer"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/TCDigitalFlyer\/documentation\/TCDigitalFlyer\/using-the-sdk"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "TCDigitalFlyer"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Using the SDK"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Logging-API",
          "level" : 2,
          "text" : "Logging API",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Note:",
                  "type" : "text"
                }
              ],
              "type" : "strong"
            },
            {
              "text" : " This logging API will be deprecated in the near future, in favour of the ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/github.com\/apple\/swift-log",
              "isActive" : true,
              "type" : "reference"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The SDK uses the following protocol for internal logging:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "public protocol Logger {",
            "    func verbose(_ message: String)",
            "    func debug(_ message: String)",
            "    func info(_ message: String)",
            "    func warning(_ message: String)",
            "    func error(_ message: String)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Consequently, nothing will print to the console from within the SDK until you set up a specific logger within the host application. Although the example below demonstrates a logger using simple print statements, it’s expected that this logger will utilize the same console, file, or cloud logging system as the host application.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The logger is a static object within the TCDigitalFlyer module. It’s advisable to assign it before initializing the SDK, though you can do so at any time or leave it nil.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For production, the host application should refrain from logging debug and verbose volumes as they may contain sensitive URLs or tokens.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "import TCDigitalFlyer",
            "",
            "final class MyLogger: TCDigitalFlyer.Logger {",
            "    func verbose(_ message: String) {",
            "        print(\"V: \\(message)\")",
            "    }",
            "    func debug(_ message: String) {",
            "        print(\"D: \\(message)\")",
            "    }",
            "    func info(_ message: String) {",
            "        print(\"I: \\(message)\")",
            "    }",
            "    func warning(_ message: String) {",
            "        print(\"W: \\(message)\")",
            "    }",
            "    func error(_ message: String) {",
            "        print(\"E: \\(message)\")",
            "    }",
            "}",
            "",
            "\/\/ ... some code later ...",
            "",
            "TCDigitalFlyer.logger = MyLogger()",
            "let digitalFlyer = try DigitalFlyer(subscriptionKey: subscriptionKey, client: client)",
            "\/\/ From XCode console:",
            "\/\/ I: TCDigitalFlyer: SDK subscription key initialized",
            "\/\/ D: TCDigitalFlyer: Redacted subscription key is abc**************************123"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Initializing-the-SDK",
          "level" : 2,
          "text" : "Initializing the SDK",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "To retrieve your flyers, you will need the Transcontinental ",
              "type" : "text"
            },
            {
              "code" : "subscription key",
              "type" : "codeVoice"
            },
            {
              "text" : " for your account. This key will be provided when registering your application with Transcontinental. The SDK uses this key internally to communicate with the Web API.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Before using any APIs, initialize the SDK with your subscription key and client name:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "import TCDigitalFlyer",
            "",
            "let digitalFlyer = try DigitalFlyer(subscriptionKey: subscriptionKey, client: client)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "subscriptionKey",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " - You receive this key when you register your application with Transcontinental",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "client",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " - The client’s name, as provided by Transcontinental",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "banner",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " - An optional banner, as provided by Transcontinental (defaults to the value provided to ",
                      "type" : "text"
                    },
                    {
                      "code" : "client",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "environment",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " - The API ",
                      "type" : "text"
                    },
                    {
                      "code" : "Environment",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " (defaults to ",
                      "type" : "text"
                    },
                    {
                      "code" : "live",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "While it’s technically possible to instantiate multiple ",
              "type" : "text"
            },
            {
              "code" : "DigitalFlyer",
              "type" : "codeVoice"
            },
            {
              "text" : " objects with the same inputs on-demand, it’s recommended to use a single instance throughout your application (e.g. a reference in your AppDelegate or environmentObject).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Instantiating multiple ",
              "type" : "text"
            },
            {
              "code" : "DigitalFlyer",
              "type" : "codeVoice"
            },
            {
              "text" : " objects with different inputs is not currently supported. It will result in undefined behavior.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Listing-Available-Publications",
          "level" : 2,
          "text" : "Listing Available Publications",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The DigitalFlyer SDK provides a simple and efficient way to retrieve digital flyers using the ",
              "type" : "text"
            },
            {
              "code" : "listPublications(storeId:completion:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method. Upon successful retrieval, a list of ",
              "type" : "text"
            },
            {
              "code" : "Publication.Attributes",
              "type" : "codeVoice"
            },
            {
              "text" : " objects will be returned.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "digitalFlyer.listPublications(storeId: storeId) { result in",
            "    switch result {",
            "    case .success(let attributes):",
            "        print(attributes) \/\/ an array of Publication.Attributes",
            "    case .failure(let error):",
            "        print(error) \/\/ a DFError",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "storeId",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " - The store’s identifier",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "language",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " - The ",
                      "type" : "text"
                    },
                    {
                      "code" : "Publication",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "’s display ",
                      "type" : "text"
                    },
                    {
                      "code" : "Language",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " (an enum defaulting to ",
                      "type" : "text"
                    },
                    {
                      "code" : ".english",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "date",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " - The date to search for available ",
                      "type" : "text"
                    },
                    {
                      "code" : "Publication",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "s (defaults to today)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "completion",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " - A closure that returns ",
                      "type" : "text"
                    },
                    {
                      "code" : "Publication.Attributes",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " for the available ",
                      "type" : "text"
                    },
                    {
                      "code" : "Publication",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "s on the main DispatchQueue.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "anchor" : "Retrieving-a-Publication",
          "level" : 2,
          "text" : "Retrieving a Publication",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Once you have a list of ",
              "type" : "text"
            },
            {
              "code" : "Publication.Attributes",
              "type" : "codeVoice"
            },
            {
              "text" : " objects, you can retrieve a ",
              "type" : "text"
            },
            {
              "code" : "Publication",
              "type" : "codeVoice"
            },
            {
              "text" : " object using the ",
              "type" : "text"
            },
            {
              "code" : "getPublication(attributes:completion:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "digitalFlyer.getPublication(attributes: attributes) { result in",
            "    switch result {",
            "    case .success(let publication):",
            "        print(publication) \/\/ a Publication",
            "    case .failure(let error):",
            "        print(error) \/\/ a DFError",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "attributes",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " - The ",
                      "type" : "text"
                    },
                    {
                      "code" : "Publication.Attributes",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " object returned from ",
                      "type" : "text"
                    },
                    {
                      "code" : "listPublications(storeId:language:date:completion:)",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "completion",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " - A closure that returns a ",
                      "type" : "text"
                    },
                    {
                      "code" : "Publication",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " object on the main DispatchQueue.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "anchor" : "Rendering-a-Publication",
          "level" : 2,
          "text" : "Rendering a Publication",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The FlyerView is a custom view that serves as the entry point for displaying the digital flyer. It accepts the publication to display, along with a configuration object that governs its visual and functional behavior.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let flyerView = FlyerView(",
            "        frame: self.view.frame,",
            "        publication: publication,",
            "        configuration: configuration",
            "    ) { event in",
            "        print(event)  \/\/ This closure will be called when an event is emitted",
            "}",
            "",
            "\/\/ Add the FlyerView to your view hierarchy",
            "self.view.addSubview(flyerView)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "frame",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " - The frame of the host UIView",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "publication",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " - The ",
                      "type" : "text"
                    },
                    {
                      "code" : "Publication",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " object returned from ",
                      "type" : "text"
                    },
                    {
                      "code" : "getPublication(attributes:completion:)",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "configuration",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " - A ",
                      "type" : "text"
                    },
                    {
                      "code" : "FlyerView.Configuration",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " object that governs the visual and functional behavior of the FlyerView",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "event",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " - A ",
                      "type" : "text"
                    },
                    {
                      "code" : "FlyerView.Event",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " object that represents an event emitted by the FlyerView",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "As of version 2.1.0, the FlyerView supports the following configuration options:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "showHeader",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " - A boolean that determines whether the header should be displayed (defaults to ",
                      "type" : "text"
                    },
                    {
                      "code" : "true",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "headerHeight",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " - The height of the header (defaults to ",
                      "type" : "text"
                    },
                    {
                      "code" : "50px",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " when shown)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "The following events are emitted by the FlyerView:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "sku",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " - The SKU of the product whose click region was tapped",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "url",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " - The URL of the internal or external link that was tapped",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "anchor" : "Error-Handling",
          "level" : 2,
          "text" : "Error Handling",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Error handling in the DigitalFlyer SDK is represented through the ",
              "type" : "text"
            },
            {
              "code" : "DFError",
              "type" : "codeVoice"
            },
            {
              "text" : " enum, which covers various cases including unauthorized access, missing subscription key, or missing resources.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here are the possible error scenarios:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "unauthorized",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ": Represents an unauthorized request, usually due to an invalid subscription key.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "notFound",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ": The requested resource was not found on the server. This could happen if the resource was deleted, or if the resource was not correctly specified.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "publicationNotFound",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ": Indicates a failed request due to an unavailable publication.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "missingSubscriptionKey",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ": This error occurs when the subscriptionKey is not provided during DigitalFlyer initialization.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "missingClient",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ": Occurs when the client parameter is missing during DigitalFlyer initialization.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "missingBanner",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ": This error indicates that the banner parameter is missing during DigitalFlyer initialization.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "invalid",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ": A generic error case for any other unidentified issue.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/TCDigitalFlyer\/documentation\/TCDigitalFlyer\/installation"
      ],
      "title" : "Getting Started"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/tcdigitalflyer\/using-the-sdk"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://TCDigitalFlyer/documentation/TCDigitalFlyer": {
  "abstract" : [
    {
      "text" : "The Transcontinental iOS SDK provides an easy way to interact with the Transcontinental Web API in order to access digital flyers. The SDK also provides pre-built UI components to allow users to browse through flyers and retrieve detailed product information.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/TCDigitalFlyer\/documentation\/TCDigitalFlyer",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "TCDigitalFlyer",
  "type" : "topic",
  "url" : "\/documentation\/tcdigitalflyer"
},
"doc://TCDigitalFlyer/documentation/TCDigitalFlyer/installation": {
  "abstract" : [
    {
      "text" : "Using SPM to install the SDK as a binary target.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/TCDigitalFlyer\/documentation\/TCDigitalFlyer\/installation",
  "kind" : "article",
  "role" : "article",
  "title" : "Installation",
  "type" : "topic",
  "url" : "\/documentation\/tcdigitalflyer\/installation"
},
"https://github.com/apple/swift-log": {
  "identifier" : "https:\/\/github.com\/apple\/swift-log",
  "title" : "Swift Log API package",
  "titleInlineContent" : [
    {
      "text" : "Swift Log API package",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/apple\/swift-log"
}
}
}