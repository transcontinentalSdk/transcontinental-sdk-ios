{
  "primaryContentSections": [
    {
      "kind": "content",
      "content": [
        {
          "anchor": "Logging-API",
          "level": 2,
          "type": "heading",
          "text": "Logging API"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "strong",
              "inlineContent": [{ "type": "text", "text": "Note:" }]
            },
            {
              "type": "text",
              "text": " This logging API will be deprecated in the near future, in favour of the "
            },
            {
              "type": "reference",
              "isActive": true,
              "identifier": "https://github.com/apple/swift-log"
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The SDK uses the following protocol for internal logging:"
            }
          ]
        },
        {
          "type": "codeListing",
          "syntax": "swift",
          "code": [
            "public protocol Logger {",
            "    func verbose(_ message: String)",
            "    func debug(_ message: String)",
            "    func info(_ message: String)",
            "    func warning(_ message: String)",
            "    func error(_ message: String)",
            "}"
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Consequently, nothing will print to the console from within the SDK until you set up a specific logger within the host application. Although the example below demonstrates a logger using simple print statements, it’s expected that this logger will utilize the same console, file, or cloud logging system as the host application."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The logger is a static object within the TCDigitalFlyer module. It’s advisable to assign it before initializing the SDK, though you can do so at any time or leave it nil."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "For production, the host application should refrain from logging debug and verbose volumes as they may contain sensitive URLs or tokens."
            }
          ]
        },
        {
          "type": "codeListing",
          "syntax": "swift",
          "code": [
            "import TCDigitalFlyer",
            "",
            "final class MyLogger: TCDigitalFlyer.Logger {",
            "    func verbose(_ message: String) {",
            "        print(\"V: \\(message)\")",
            "    }",
            "    func debug(_ message: String) {",
            "        print(\"D: \\(message)\")",
            "    }",
            "    func info(_ message: String) {",
            "        print(\"I: \\(message)\")",
            "    }",
            "    func warning(_ message: String) {",
            "        print(\"W: \\(message)\")",
            "    }",
            "    func error(_ message: String) {",
            "        print(\"E: \\(message)\")",
            "    }",
            "}",
            "",
            "// ... some code later ...",
            "",
            "TCDigitalFlyer.logger = MyLogger()",
            "let digitalFlyer = try DigitalFlyer(subscriptionKey: subscriptionKey, client: client)",
            "// From XCode console:",
            "// I: TCDigitalFlyer: SDK subscription key initialized",
            "// D: TCDigitalFlyer: Redacted subscription key is abc**************************123"
          ]
        },
        {
          "anchor": "Initializing-the-SDK",
          "level": 2,
          "type": "heading",
          "text": "Initializing the SDK"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "To retrieve your flyers, you will need the Transcontinental "
            },
            { "type": "codeVoice", "code": "subscription key" },
            {
              "type": "text",
              "text": " for your account. This key will be provided when registering your application with Transcontinental. The SDK uses this key internally to communicate with the Web API."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Before using any APIs, initialize the SDK with your subscription key and client name:"
            }
          ]
        },
        {
          "type": "codeListing",
          "syntax": "swift",
          "code": [
            "import TCDigitalFlyer",
            "",
            "let digitalFlyer = try DigitalFlyer(subscriptionKey: subscriptionKey, client: client)"
          ]
        },
        {
          "type": "unorderedList",
          "items": [
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "subscriptionKey" },
                    {
                      "type": "text",
                      "text": " - You receive this key when you register your application with Transcontinental"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "client" },
                    {
                      "type": "text",
                      "text": " - The client’s name, as provided by Transcontinental"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "banner" },
                    {
                      "type": "text",
                      "text": " - An optional banner, as provided by Transcontinental (defaults to the value provided to "
                    },
                    { "type": "codeVoice", "code": "client" },
                    { "type": "text", "text": ")" }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "environment" },
                    { "type": "text", "text": " - The API " },
                    { "type": "codeVoice", "code": "Environment" },
                    { "type": "text", "text": " (defaults to " },
                    { "type": "codeVoice", "code": "live" },
                    { "type": "text", "text": ")" }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "While it’s technically possible to instantiate multiple "
            },
            { "type": "codeVoice", "code": "DigitalFlyer" },
            {
              "type": "text",
              "text": " objects with the same inputs on-demand, it’s recommended to use a single instance throughout your application (e.g. a reference in your AppDelegate or environmentObject)."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            { "type": "text", "text": "Instantiating multiple " },
            { "type": "codeVoice", "code": "DigitalFlyer" },
            {
              "type": "text",
              "text": " objects with different inputs is not currently supported. It will result in undefined behavior."
            }
          ]
        },
        {
          "anchor": "Listing-Available-Publications",
          "level": 2,
          "type": "heading",
          "text": "Listing Available Publications"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The DigitalFlyer SDK provides a simple and efficient way to retrieve digital flyers using the "
            },
            {
              "type": "codeVoice",
              "code": "listPublications(storeId:completion:)"
            },
            {
              "type": "text",
              "text": " method. Upon successful retrieval, a list of "
            },
            { "type": "codeVoice", "code": "Publication.Attribute" },
            { "type": "text", "text": " objects will be returned." }
          ]
        },
        {
          "type": "codeListing",
          "syntax": "swift",
          "code": [
            "digitalFlyer.listPublications(storeId: storeId) { result in",
            "    switch result {",
            "    case .success(let attributes):",
            "        print(attributes) // an array of Publication.Attribute",
            "    case .failure(let error):",
            "        print(error) // a DFError",
            "    }",
            "}"
          ]
        },
        {
          "type": "unorderedList",
          "items": [
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "storeId" },
                    { "type": "text", "text": " - The store’s identifier" }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "language" },
                    { "type": "text", "text": " - The " },
                    { "type": "codeVoice", "code": "Publication" },
                    { "type": "text", "text": "’s display " },
                    { "type": "codeVoice", "code": "Language" },
                    { "type": "text", "text": " (an enum defaulting to " },
                    { "type": "codeVoice", "code": ".english" },
                    { "type": "text", "text": ")" }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "date" },
                    {
                      "type": "text",
                      "text": " - The date to search for available "
                    },
                    { "type": "codeVoice", "code": "Publication" },
                    { "type": "text", "text": "s (defaults to today)" }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "completion" },
                    { "type": "text", "text": " - A closure that returns " },
                    { "type": "codeVoice", "code": "Publication.Attributes" },
                    { "type": "text", "text": " for the available " },
                    { "type": "codeVoice", "code": "Publication" },
                    { "type": "text", "text": "s on the main DispatchQueue." }
                  ]
                }
              ]
            }
          ]
        },
        {
          "anchor": "Retrieving-a-Publication",
          "level": 2,
          "type": "heading",
          "text": "Retrieving a Publication"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            { "type": "text", "text": "Once you have a list of " },
            { "type": "codeVoice", "code": "Publication.Attribute" },
            { "type": "text", "text": " objects, you can retrieve a " },
            { "type": "codeVoice", "code": "Publication" },
            { "type": "text", "text": " object using the " },
            {
              "type": "codeVoice",
              "code": "getPublication(attribute:completion:)"
            },
            { "type": "text", "text": " method." }
          ]
        },
        {
          "type": "codeListing",
          "syntax": "swift",
          "code": [
            "digitalFlyer.getPublication(attribute: attribute) { result in",
            "    switch result {",
            "    case .success(let publication):",
            "        print(publication) // a Publication",
            "    case .failure(let error):",
            "        print(error) // a DFError",
            "    }",
            "}"
          ]
        },
        {
          "type": "unorderedList",
          "items": [
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "attribute" },
                    { "type": "text", "text": " - The " },
                    { "type": "codeVoice", "code": "Publication.Attribute" },
                    { "type": "text", "text": " object returned from " },
                    {
                      "type": "codeVoice",
                      "code": "listPublications(storeId:language:date:completion:)"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "completion" },
                    { "type": "text", "text": " - A closure that returns a " },
                    { "type": "codeVoice", "code": "Publication" },
                    {
                      "type": "text",
                      "text": " object on the main DispatchQueue."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "anchor": "Rendering-a-Publication",
          "level": 2,
          "type": "heading",
          "text": "Rendering a Publication"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The FlyerView is a custom view that serves as the entry point for displaying the digital flyer. It accepts the publication to display, along with a configuration object that governs its visual and functional behavior."
            }
          ]
        },
        {
          "type": "codeListing",
          "syntax": "swift",
          "code": [
            "let flyerView = FlyerView(",
            "        frame: self.view.frame,",
            "        publication: publication,",
            "        configuration: configuration",
            "    ) { event in",
            "        print(event)  // This closure will be called when an event is emitted",
            "}",
            "",
            "// Add the FlyerView to your view hierarchy",
            "self.view.addSubview(flyerView)"
          ]
        },
        {
          "type": "unorderedList",
          "items": [
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "frame" },
                    {
                      "type": "text",
                      "text": " - The frame of the host UIView"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "publication" },
                    { "type": "text", "text": " - The " },
                    { "type": "codeVoice", "code": "Publication" },
                    { "type": "text", "text": " object returned from " },
                    {
                      "type": "codeVoice",
                      "code": "getPublication(attribute:completion:)"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "configuration" },
                    { "type": "text", "text": " - A " },
                    { "type": "codeVoice", "code": "FlyerView.Configuration" },
                    {
                      "type": "text",
                      "text": " object that governs the visual and functional behavior of the FlyerView"
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "event" },
                    { "type": "text", "text": " - A " },
                    { "type": "codeVoice", "code": "FlyerView.Event" },
                    {
                      "type": "text",
                      "text": " object that represents an event emitted by the FlyerView"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "As of version 2.0.0, the FlyerView supports the following configuration options:"
            }
          ]
        },
        {
          "type": "unorderedList",
          "items": [
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "showHeader" },
                    {
                      "type": "text",
                      "text": " - A boolean that determines whether the header should be displayed (defaults to "
                    },
                    { "type": "codeVoice", "code": "true" },
                    { "type": "text", "text": ")" }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "headerHeight" },
                    {
                      "type": "text",
                      "text": " - The height of the header (defaults to "
                    },
                    { "type": "codeVoice", "code": "50px" },
                    { "type": "text", "text": " when shown)" }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "The following events are emitted by the FlyerView:"
            }
          ]
        },
        {
          "type": "unorderedList",
          "items": [
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "sku" },
                    {
                      "type": "text",
                      "text": " - The SKU of the product whose click region was tapped"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "anchor": "Error-Handling",
          "level": 2,
          "type": "heading",
          "text": "Error Handling"
        },
        {
          "type": "paragraph",
          "inlineContent": [
            {
              "type": "text",
              "text": "Error handling in the DigitalFlyer SDK is represented through the "
            },
            { "type": "codeVoice", "code": "DFError" },
            {
              "type": "text",
              "text": " enum, which covers various cases including unauthorized access, missing subscription key, or missing resources."
            }
          ]
        },
        {
          "type": "paragraph",
          "inlineContent": [
            { "type": "text", "text": "Here are the possible error scenarios:" }
          ]
        },
        {
          "type": "unorderedList",
          "items": [
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "unauthorized" },
                    {
                      "type": "text",
                      "text": ": Represents an unauthorized request, usually due to an invalid subscription key."
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "notFound" },
                    {
                      "type": "text",
                      "text": ": The requested resource was not found on the server. This could happen if the resource was deleted, or if the resource was not correctly specified."
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "publicationNotFound" },
                    {
                      "type": "text",
                      "text": ": Indicates a failed request due to an unavailable publication."
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "missingSubscriptionKey" },
                    {
                      "type": "text",
                      "text": ": This error occurs when the subscriptionKey is not provided during DigitalFlyer initialization."
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "missingClient" },
                    {
                      "type": "text",
                      "text": ": Occurs when the client parameter is missing during DigitalFlyer initialization."
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "missingBanner" },
                    {
                      "type": "text",
                      "text": ": This error indicates that the banner parameter is missing during DigitalFlyer initialization."
                    }
                  ]
                }
              ]
            },
            {
              "content": [
                {
                  "type": "paragraph",
                  "inlineContent": [
                    { "type": "codeVoice", "code": "invalid" },
                    {
                      "type": "text",
                      "text": ": A generic error case for any other unidentified issue."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "schemaVersion": { "major": 0, "minor": 3, "patch": 0 },
  "sections": [],
  "variants": [
    {
      "paths": ["/documentation/tcdigitalflyer/using-the-sdk"],
      "traits": [{ "interfaceLanguage": "swift" }]
    }
  ],
  "identifier": {
    "url": "doc://TCDigitalFlyer/documentation/TCDigitalFlyer/using-the-sdk",
    "interfaceLanguage": "swift"
  },
  "kind": "article",
  "metadata": {
    "roleHeading": "Article",
    "title": "Using the SDK",
    "role": "article",
    "modules": [{ "name": "TCDigitalFlyer" }]
  },
  "hierarchy": {
    "paths": [["doc://TCDigitalFlyer/documentation/TCDigitalFlyer"]]
  },
  "seeAlsoSections": [
    {
      "title": "Getting Started",
      "identifiers": [
        "doc://TCDigitalFlyer/documentation/TCDigitalFlyer/installation"
      ],
      "generated": true
    }
  ],
  "references": {
    "https://github.com/apple/swift-log": {
      "title": "Swift Log API package",
      "titleInlineContent": [
        { "type": "text", "text": "Swift Log API package" }
      ],
      "type": "link",
      "identifier": "https://github.com/apple/swift-log",
      "url": "https://github.com/apple/swift-log"
    },
    "doc://TCDigitalFlyer/documentation/TCDigitalFlyer": {
      "role": "collection",
      "title": "TCDigitalFlyer",
      "abstract": [
        {
          "type": "text",
          "text": "The Transcontinental iOS SDK provides an easy way to interact with the Transcontinental Web API in order to access digital flyers. The SDK also provides pre-built UI components to allow users to browse through flyers and retrieve detailed product information."
        }
      ],
      "identifier": "doc://TCDigitalFlyer/documentation/TCDigitalFlyer",
      "kind": "symbol",
      "type": "topic",
      "url": "/documentation/tcdigitalflyer"
    },
    "doc://TCDigitalFlyer/documentation/TCDigitalFlyer/installation": {
      "role": "article",
      "title": "Installation",
      "abstract": [
        {
          "type": "text",
          "text": "Using SPM to install the SDK as a binary target."
        }
      ],
      "identifier": "doc://TCDigitalFlyer/documentation/TCDigitalFlyer/installation",
      "kind": "article",
      "type": "topic",
      "url": "/documentation/tcdigitalflyer/installation"
    }
  }
}
